/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.serverless.twitterlab.domain;

/**
 *
 * @author camrojass
 * @mail camilo.rojas@mail.escuelaing.edu.co
 */


import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.io.IOException;

import com.serverless.twitterlab.commons.DynamoDBAdapter;
import org.apache.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER_POST_TABLE_NAME")
public class Post {
    
    private static final String POST_TABLE_NAME = System.getenv("POST_TABLE_NAME");
    
    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;
    
    private Logger logger = Logger.getLogger(this.getClass());
    
    private String id;    
    private String sender;
    private String comment;
    private Date date;    
    private boolean IsPrivate;
    
    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId(){
        return this.id;
    }
    
    public void setId(String id){
        this.id = id;
    }

    
    public void setSender(String sender) {
        this.sender = sender;
    }

    @DynamoDBAttribute(attributeName = "sender")
    public String getSender() {
        return sender;
    }

    @DynamoDBAttribute(attributeName = "comment")
    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    @DynamoDBAttribute(attributeName = "created")
    @DynamoDBAutoGeneratedTimestamp(strategy= DynamoDBAutoGenerateStrategy.CREATE)
    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

     public boolean getIsPrivate(){
        return IsPrivate;
    }
    
    public void setIsPrivate(boolean IsPrivate){
        this.IsPrivate = IsPrivate;
    }
    
    public Post(){
            this.setDate(new Date());
        //mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(POST_TABLE_NAME))
                .build();
        //get the adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        //create mapper
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }
    
    public String toString(){
        return String.format("Post [is=%s, comment=%s, date=%s, IsPrivate=%s, sender=%s]", this.id,this.comment, this.date, this.IsPrivate, this.sender);
    }
    
    //methods
    public Boolean ifIsPrivate(){
        return this.client.describeTable(POST_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }
    
    public List<Post> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Post> results = this.mapper.scan(Post.class, scanExp);
        for (Post p : results) {
            logger.info("Users - list(): " + p.toString());
        }
        return results;
    }
    
    public Post get(String id) throws IOException {
        Post post = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Post> queryExp = new DynamoDBQueryExpression<Post>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Post> result = this.mapper.query(Post.class, queryExp);
        if (!result.isEmpty()) {
            post = result.get(0);
            logger.info("Post - get(): Post - " + post.toString());
        } else {
            logger.info("Post - get(): user - Not Found.");
        }
        return post;
    }
    
    public void save(Post post) throws IOException {
        logger.info("Post - save(): " + post.toString());
        this.mapper.save(post);
    }
    
    public Boolean delete(String id) throws IOException {
        Post post = null;
        // get Post if exists
        post = get(id);
        if (post != null) {
            logger.info("Post - delete(): " + post.toString());
            this.mapper.delete(post);
        } else {
            logger.info("Post - delete(): post - does not exist.");
            return false;
        }
        return true;
    }    
}
